<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyberpunk TIL</title>
  
  <subtitle>Today I learned.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://til.linyiru.com/"/>
  <updated>2019-08-19T15:34:20.089Z</updated>
  <id>https://til.linyiru.com/</id>
  
  <author>
    <name>Yi-Ru Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Find and Kill All Processes</title>
    <link href="https://til.linyiru.com/2019/07/awk/find-and-kill-all-processes/"/>
    <id>https://til.linyiru.com/2019/07/awk/find-and-kill-all-processes/</id>
    <published>2019-07-31T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>When I found CPU usage is higher than usual, I used to do two things:</p><ol><li>Use <code>ps</code> &amp; <code>grep</code> to filter possible processes</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep ruby</span><br></pre></td></tr></table></figure><ol start="2"><li>Kill the processes</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill PROCESS_ID</span><br></pre></td></tr></table></figure><p>However, if there are lots of processes to kill, it would be great if you merge these two steps and one more powerful tool <code>awk</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill $(ps aux | grep 'guard' | awk '&#123;print $2&#125;')</span><br></pre></td></tr></table></figure><p>Nice and easy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I found CPU usage is higher than usual, I used to do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;ps&lt;/code&gt; &amp;amp; &lt;code&gt;grep&lt;/code&gt; to filter 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Updating Kubernetes ConfigMap and Secrets without removing the existing one</title>
    <link href="https://til.linyiru.com/2019/03/kubernetes/updating-kubernetes-configmap/"/>
    <id>https://til.linyiru.com/2019/03/kubernetes/updating-kubernetes-configmap/</id>
    <published>2019-03-12T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes ConfigMap &amp; Secrets are both really useful for managing environment variables and credentials.</p><p>You can create a cnofigmap from shell easily:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap app-config --from-env-file ./.env.production</span><br></pre></td></tr></table></figure><p>If you wanna change the configuration in configmap, you can just edit it from command line as well:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit configmap admin-config</span><br></pre></td></tr></table></figure><p>Very nice and easy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kubernetes ConfigMap &amp;amp; Secrets are both really useful for managing environment variables and credentials.&lt;/p&gt;
&lt;p&gt;You can create a cno
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Resolve .dev domain correctly</title>
    <link href="https://til.linyiru.com/2018/12/macos/resolve-dev-domain-correctly/"/>
    <id>https://til.linyiru.com/2018/12/macos/resolve-dev-domain-correctly/</id>
    <published>2018-12-26T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>Everytime I tried to visit websites with a <code>.dev</code> domain, I found the following error message:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DNS_PROBE_FINISHED_NXDOMAIN</span><br></pre></td></tr></table></figure><p>However when I use <code>dig</code> to figure out why I can’t resolve <code>.dev</code> domain, everything goes well.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> dig pptr.dev</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; pptr.dev</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7638</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 512</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;pptr.dev.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">pptr.dev.3599INA185.199.108.153</span><br><span class="line">pptr.dev.3599INA185.199.109.153</span><br><span class="line">pptr.dev.3599INA185.199.110.153</span><br><span class="line">pptr.dev.3599INA185.199.111.153</span><br><span class="line"></span><br><span class="line">;; Query time: 224 msec</span><br><span class="line">;; SERVER: 8.8.8.8#53(8.8.8.8)</span><br><span class="line">;; WHEN: Thu Dec 27 11:05:52 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 101</span><br></pre></td></tr></table></figure><p>So I guess it’s related to my local settings about DNS. The solution is here: remove <code>/etc/resolver/dev</code> and done.</p><p>The reason why there was a <code>etc/resolver/dev</code> file is I used to develop websites with a <code>.dev</code> <strong>local</strong> domain for testing for years.</p><p>Now <code>.dev</code> gTLD domain is owned by Google, you should use <code>.test</code>, <code>.local</code> for local development.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Everytime I tried to visit websites with a &lt;code&gt;.dev&lt;/code&gt; domain, I found the following error message:&lt;/p&gt;
&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Make - How to fix *** missing separator. Stop.</title>
    <link href="https://til.linyiru.com/2018/04/make/missing-separator/"/>
    <id>https://til.linyiru.com/2018/04/make/missing-separator/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>When you got:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Makefile:2: *** missing separator.  Stop.</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* missing separator (did you mean TAB instead of 8 spaces?). Stop.</span><br></pre></td></tr></table></figure><p>It’s easy to fix it. Use <code>Tab</code> instead of space in your <code>Makefile</code>.</p><p>You can fix it by changing <code>Spaces</code> to <code>Tab</code> characters. Simply open your <code>Makefile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim Makefile</span><br></pre></td></tr></table></figure><p>And then run the following command within:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/^[ ]\+/^I/</span><br></pre></td></tr></table></figure><p>This will substitute all the lines begin with one or more <code>Spaces</code> character with an actual <code>Tab</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When you got:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Puma-dev - an alternative to Pow</title>
    <link href="https://til.linyiru.com/2017/05/rails/puma-and-puma-dev/"/>
    <id>https://til.linyiru.com/2017/05/rails/puma-and-puma-dev/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="why-puma-dev">Why puma-dev</h2><p><code>puma-dev</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> is a tool to manage rack apps in development with puma.</p><p>If you need the following features, you have to use puma-dev instead of pow:</p><ul><li>Websockets or ActionCable in Rails 5</li><li>Zero-config HTTPs support to your development environment.</li></ul><h2 id="installation">Installation</h2><ul><li>Remove your pow first <code>$ curl get.pow.cx/uninstall.sh | sh</code></li><li>Install via Homebrew: <code>brew install puma/puma/puma-dev</code></li><li><code>sudo puma-dev -setup</code> to configure DNS settings as root.</li><li>Run <code>puma-dev -install</code> to configure puma-dev and run it in the background on ports both 80 and 443. This step requires root permission again to install certificates for HTTPs.</li></ul><h2 id="pro-tips">Pro tips</h2><ul><li>Just move or rename your old <code>~/.pow</code> directory to <code>~/.puma-dev</code></li><li>Run <code>puma-dev link</code> in the rack app directory then it will generate the link automatically</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/puma/puma-dev" target="_blank" rel="noopener">https://github.com/puma/puma-dev</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;why-puma-dev&quot;&gt;Why puma-dev&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;puma-dev&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; is a tool
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Use both ActiveRecord and Mongoid in a Rails project</title>
    <link href="https://til.linyiru.com/2017/05/rails/use-both-active-record-and-mongoid/"/>
    <id>https://til.linyiru.com/2017/05/rails/use-both-active-record-and-mongoid/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>Use both ActiveRecord and Mongoid in a Rails project is easy. Add mongoid in Gemfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;mongoid&apos;, &apos;~&gt; 6.1.0&apos;</span><br></pre></td></tr></table></figure><p>then <code>bundle install</code></p><p>However, the <code>mongoid</code> gem would change your default ORM adapter from ActiveRecord to Mongoid:</p><p>If you’re not sure which default adapter is you can try: <code>rails g model</code> and check the output message</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  rails generate model NAME [field[:type][:index] field[:type][:index]] [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      [--skip-namespace], [--no-skip-namespace]  # Skip namespace (affects only isolated applications)</span><br><span class="line">      [--force-plural], [--no-force-plural]      # Forces the use of the given model name</span><br><span class="line">  -o, --orm=NAME                                 # ORM to be invoked</span><br><span class="line">                                                 # Default: mongoid</span><br></pre></td></tr></table></figure><p>So if you wanna generate a new model inherited from ActiveRecord:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g model Manager --orm=active_record</span><br></pre></td></tr></table></figure><p>Notice: it’s <code>active_record</code> instead of <code>activerecord</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Use both ActiveRecord and Mongoid in a Rails project is easy. Add mongoid in Gemfile:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Static Website Hexo on GitHub</title>
    <link href="https://til.linyiru.com/2017/05/blogging/hexo-on-github-pages/"/>
    <id>https://til.linyiru.com/2017/05/blogging/hexo-on-github-pages/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>It’s easy to setup a Hexo website, there are tons of tutorials on the internet.</p><h2 id="hexo-basic-setup">Hexo: Basic Setup</h2><p>It’s easy to setup a Hexo website, there are tons of tutorials on the internet.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>You’ll need several useful plugins to improve your Hexo website, such as to generate RSS feed and XML sitemap.</p><h2 id="push-your-hexo-website-to-github">Push your Hexo website to GitHub</h2><p>How to use GitHub Pages to host your website for free? Just create a new GitHub Repository. It’s free if the repository is public.</p><p>Then Install <code>hexo-deployer-git</code> plugin:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>Edit the setting:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><p>Try to <code>hexo deploy</code> to deploy it to your repository.</p><p>Notice that GitHub Pages will build and serve website from one of the branch such as <code>gh-pages</code> or <code>master</code>. So you have to set <code>source</code> in repository settings.</p><h2 id="use-https">Use HTTPS</h2><p>Cloudflare provides free SSL to secure your website, all you have to do is:</p><ul><li>Visit <code>Crypto</code> section in your domain name dashboard</li><li>In the first panel SSL, turn it on. The option should be “Flexible” or “Full”</li><li>Make sure your domain name is fully managed by Cloudflare</li></ul><h2 id="auto-deployment-using-circleci">Auto Deployment using CircleCI</h2><ul><li>Add <code>circle.yml</code> in your repository.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">checkout:</span><br><span class="line">  post:</span><br><span class="line">    - git submodule sync</span><br><span class="line">    - git submodule update --init</span><br><span class="line"></span><br><span class="line">deployment:</span><br><span class="line">  production:</span><br><span class="line">    branch: master</span><br><span class="line">    commands:</span><br><span class="line">      - git config --global user.name &quot;Circle CI&quot;</span><br><span class="line">      - git config --global user.email &quot;YOUR EMAIL HERE&quot;</span><br><span class="line">      - hexo clean</span><br><span class="line">      - hexo generate</span><br><span class="line">      - hexo deploy</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">  override:</span><br><span class="line">    - echo &quot;Passed&quot;</span><br></pre></td></tr></table></figure><ul><li>In CircleCI, add your project and let it try to build your website.</li><li>Remember to sync submodule if you use submodule to clone a theme into your repository.</li><li>You can use something like <code>html-proofer</code> to validate the HTML and find out dead links. However I choose to <code>echo &quot;Passed&quot;</code>.</li><li>You have to generate a pair of SSH key and add it to CircleCI SSH Permission so that CircleCI will be able to access to your GitHub repository for both <code>read and write</code>.</li></ul><p>Once the settings are done, the publishing process will be much easier: create a new post and commit it into your repository.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s easy to setup a Hexo website, there are tons of tutorials on the internet.&lt;/p&gt;
&lt;h2 id=&quot;hexo-basic-setup&quot;&gt;Hexo: Basic Setup&lt;/h2&gt;
&lt;p&gt;I
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Heroku Buildpack for Crystal</title>
    <link href="https://til.linyiru.com/2017/04/crystal/heroku-buildpack-for-crystal/"/>
    <id>https://til.linyiru.com/2017/04/crystal/heroku-buildpack-for-crystal/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>In a Crystal-based project, initialize your heroku app:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku create --buildpack https://github.com/crystal-lang/heroku-buildpack-crystal.git</span><br></pre></td></tr></table></figure><p>If you want to assign the heroku app name:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku create YOUR_APP_NAME --buildpack https://github.com/crystal-lang/heroku-buildpack-crystal.git</span><br></pre></td></tr></table></figure><p>Deploy to heroku:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push heroku master</span><br></pre></td></tr></table></figure><p>Open the website/application:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku open</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In a Crystal-based project, initialize your heroku app:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GNU sed on macOS</title>
    <link href="https://til.linyiru.com/2017/04/sed/gnu-sed-on-macox/"/>
    <id>https://til.linyiru.com/2017/04/sed/gnu-sed-on-macox/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p><code>sed</code>(/usr/bin/sed) on macOS and GNU <code>sed</code> are different. How to install GNU <code>sed</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnu-sed</span><br></pre></td></tr></table></figure><p>GNU sed will be located in <code>/usr/local/bin/sed</code>. You can use <code>gsed</code> in terminal.</p><p>Or you can install GNU sed by the following command to use GNU <code>sed</code> by default.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnu-sed --with-default-names</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;sed&lt;/code&gt;(/usr/bin/sed) on macOS and GNU &lt;code&gt;sed&lt;/code&gt; are different. How to install GNU &lt;code&gt;sed&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Remove YAML Front Matter</title>
    <link href="https://til.linyiru.com/2017/04/yaml/remove-yaml-front-matter/"/>
    <id>https://til.linyiru.com/2017/04/yaml/remove-yaml-front-matter/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2019-08-19T15:34:20.089Z</updated>
    
    <content type="html"><![CDATA[<p>There are many ways to remove YAML Front Matter, here is how I use <code>sed</code> to do so:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '1 &#123; /^---/ &#123; :a N; /\n---/! ba; d&#125; &#125;' INPUT_FILE</span><br></pre></td></tr></table></figure><p>Explanation:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1 &#123;              # in the first line</span><br><span class="line">  /^---/ &#123;       # if it starts with ---</span><br><span class="line">    :a           # jump label for looping</span><br><span class="line">    N            # fetch the next line, append to pattern space</span><br><span class="line">    /\n---/! ba; # if the result does not contain \n--- (that is, if the last</span><br><span class="line">                 # fetched line does not begin with ---), go back to :a</span><br><span class="line">    d            # then delete the whole thing.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">                 # otherwise drop off the end here and do the default (print</span><br><span class="line">                 # the line)</span><br></pre></td></tr></table></figure><p>Furthermore, if you wanna keep some useful metadata in front matter like post title in blogging system, you can do so:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title=$(grep '^title\:\(.*\)$' $1 | sed -e 's/title\:\s//g')</span><br><span class="line">sed -i -e "/---/a # `echo $title`" $1</span><br><span class="line">sed -i '1 &#123; /^---/ &#123; :a N; /\n---/! ba; d&#125; &#125;' $1</span><br></pre></td></tr></table></figure><p>Here is a workaround to insert <code>$title</code> in each <code>---</code> then remove YAML Front Matter.</p><p>References:</p><ul><li><a href="http://stackoverflow.com/questions/28221779/how-to-remove-yaml-frontmatter-from-markdown-files" target="_blank" rel="noopener">http://stackoverflow.com/questions/28221779/how-to-remove-yaml-frontmatter-from-markdown-files</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There are many ways to remove YAML Front Matter, here is how I use &lt;code&gt;sed&lt;/code&gt; to do so:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
